@model List<MHDecora.Site.Domain.Entities.Montagem>

<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />

<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>


<style>
    /* Estilos adicionais para ajustar o layout do carrossel */
    

    .carrossel__titulo {
        color: var(--laranja-secundario);
        background-color: var(--branco-secundario);
        text-align: center;
        text-transform: uppercase;
        font-size: 18px;
        font-weight: 700;
        padding: 1em 0 0.5em 0;
    }

    .swiper-slide img {
        width: 100%;
    }

    .swiper-button-prev, .swiper-button-next {
        display: none;
    }

    .swiper-pagination {
        position: initial;
        margin: .5em 0;
    }

    .swiper-pagination {
        text-align: center; /* Centraliza as bolinhas de navegação */
        margin-top: 10px; /* Espaçamento superior opcional */
    }

        .swiper-pagination .swiper-pagination-bullet {
            width: 8px; /* Tamanho das bolinhas */
            height: 8px;
            background-color: #007bff; /* Cor das bolinhas */
            opacity: 0.5; /* Opacidade das bolinhas */
        }

        .swiper-pagination .swiper-pagination-bullet-active {
            opacity: 1; /* Opacidade da bolinha ativa */
        }

    /* Estilo para o container dos cards */
    .card-container-gal {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        padding: 20px;
    }

    /* Estilo para cada card */
    .card-gal {
        border-radius: 15px;
        box-shadow: -1px 1px 5px 3px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 270px; /* Largura do card */
        padding: 15px;
        margin-left: 10px;
        margin-top: 5px;
    }

        /* Estilo para a imagem dentro do card */
        .card-gal img {
            width: 100%;
            box-sizing: border-box;
        }

    /* Estilo para o conteúdo de texto */
    .card-content-gal {
        text-align: left;
        padding-top: 10px;
    }

    /* Estilo para o título */
    .card-title-gal {
 
        font-style: normal; /* Estilo da fonte (normal, italic, etc.) */
        font-display: swap;
        font-size: 16px;
         font-weight: bold;
        margin-bottom: 5px;
        margin-top: 10px;
    }

    /* Estilo para a descrição */
    .card-description-gal {
        font-size: 16px;
        color: #666;
    }
    </style>


<body style="min-height: 100vh">
    <div class="container-filter">
    @{ 
        if (Model.FirstOrDefault().CaminhoImagem == null)
        {
            <div class="filter-text">
                @if (Model.FirstOrDefault().Categoria != null)
                {
                    <span style="font-size: xxx-large">Categoria: "@Model.FirstOrDefault().Categoria.Nome"</span>
                }
                else
                {
                    <span style="font-size: xxx-large">Tema: "@Model.FirstOrDefault().NomeTema"</span>
                }

                <br />
                <br />
                <p>
                    Não foi encontrado nenhum resultado
                </p>
            </div>
        }
        else
        {
            <div class="container-filter">        

                <div class="filter-text">
                     <h1>@Model.FirstOrDefault().Categoria</h1>
                </div>
                    <br />
                     @*<p style="text-align: center;font-size: larger;margin-bottom: 40px;">
                         @Model.FirstOrDefault().Categoria.Descricao
                     </p>*@
                <div class="filter-buttons">
                    <select id="filter-select" name="filters">
                        <option value="" disabled selected>Filtrar por</option>
                        <option value="order" data-name="order">Ordem Alfabética</option>
                        <option value="recent" data-name="recent">Recentes</option>
                    </select>
                </div>

                <div class="filterable-cards">
                    @{
                        if (Model.Count() > 0)
                        {
                            foreach (var item in Model)
                            {
                                <div class="card" data-name="">
                                    <img src="@item.CaminhoImagem" alt="recent" />
                                    <div class="card-body">

                                            <h6 class="card-title-gal">@item.Titulo</h6>
                                            <p class="card-title-gal negrito">@item.NomeTema</p>
                                        <a href="@Url.Action("Detalhes", "Home", new { montagemId = item.Id })" class="btn">Saiba mais</a>
                                    </div>
                                </div>
                            }

                        }
                    }
                </div>

                <div class="pagination">
                    <a href=""></a>
                    <a href="" class="active">1</a>
                    <a href="">2</a>
                    <a href="">3</a>
                    <a href="">4</a>
                    <a href="">></a>
                </div>
            </div>
        }
    }
    
    </div>

    <script src="~/js/main.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const cards = document.querySelectorAll(".filterable-cards .card");
            const pagination = document.querySelector(".pagination");
            const cardsPerPage = 12;
            let currentPage = 1;

            function showPage(page) {
                const start = (page - 1) * cardsPerPage;
                const end = page * cardsPerPage;

                cards.forEach((card, index) => {
                    card.style.display =
                        index >= start && index < end ? "block" : "none";
                });

                updatePagination(page);
            }

            function updatePagination(page) {
                pagination.innerHTML = "";

                const totalPages = Math.ceil(cards.length / cardsPerPage);
                const paginationFragment = document.createDocumentFragment();

                const prevLink = document.createElement("a");
                prevLink.href = "#";
                prevLink.textContent = "<";
                if (page === 1) {
                    prevLink.classList.add("disabled");
                }
                prevLink.addEventListener("click", (e) => {
                    e.preventDefault();
                    if (currentPage > 1) {
                        currentPage -= 1;
                        showPage(currentPage);
                    }
                });
                paginationFragment.appendChild(prevLink);

                for (let i = 1; i <= totalPages; i++) {
                    const pageLink = document.createElement("a");
                    pageLink.href = "#";
                    pageLink.textContent = i;
                    if (i === page) {
                        pageLink.classList.add("active");
                    }
                    pageLink.addEventListener("click", (e) => {
                        e.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                    });

                    paginationFragment.appendChild(pageLink);
                }

                const nextLink = document.createElement("a");
                nextLink.href = "#";
                nextLink.textContent = ">";
                if (page === totalPages) {
                    nextLink.classList.add("disabled");
                }
                nextLink.addEventListener("click", (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) {
                        currentPage += 1;
                        showPage(currentPage);
                    }
                });
                paginationFragment.appendChild(nextLink);

                pagination.appendChild(paginationFragment);
            }

            showPage(currentPage);
        });
    </script>

    <script src="~/js/filter.js"></script>

    <script>
        let products = null;
        // get datas from file json
        // fetch("../data/products.json")
        //     .then((response) => response.json())
        //     .then((data) => {
        //         products = data;
        //         addDataToHTML();
        //     });

        function addDataToHTML() {
            // remove datas default from HTML
            let listProductHTML = document.querySelector(".listProduct");

            // add new datas
            if (products != null) {
                // if has data
                products.forEach((product) => {
                    let newProduct = document.createElement("a");
                    newProduct.href = "/detail.html?id=" + product.id;
                    newProduct.classList.add("item");
                    newProduct.innerHTML = `<img src="${product.image}" alt="">
                                    <h2>${product.name}</h2>
                                    `;
                    listProductHTML.appendChild(newProduct);
                });
            }
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var filterDropdown = document.querySelector(".filter-dropdown");

            filterDropdown.addEventListener("click", function () {
                filterDropdown.classList.toggle("active");
            });

            // Fechar o submenu se clicar fora dele
            window.addEventListener("click", function (e) {
                if (!filterDropdown.contains(e.target)) {
                    filterDropdown.classList.remove("active");
                }
            });
        });
    </script>
</body>